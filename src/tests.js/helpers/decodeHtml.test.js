import { decodeHtml, lazyRemoveHtmlTags } from '../../helpers/decodeHtml';

describe('decodeHTML::decodeHtml', () => {
  it('should decode escaped HTML characters from the given string', () => {
    const testString =
      '&Tab; &NewLine; &nbsp;  &quot; &amp; &lt; &gt; &iexcl; &cent; &pound; &curren; &yen; &brvbar; &sect; &uml; &copy; &ordf; &laquo; &not; &shy; &reg; &macr; &deg; &plusmn; &sup2; &sup3; &acute; &micro; &para; &dot; &cedil; &sup1; &ordm; &raquo; &frac14; &frac12; &frac34; &iquest; &Agrave; &Aacute; &Acirc; &Atilde; &Auml; &Aring; &AElig; &Ccedil; &Egrave; &Eacute; &Ecirc; &Euml; &Igrave; &Iacute; &Icirc; &Iuml; &ETH; &Ntilde; &Ograve; &Oacute; &Ocirc; &Otilde; &Ouml; &times; &Oslash; &Ugrave; &Uacute; &Ucirc; &Uuml; &Yacute; &THORN; &szlig; &agrave; &aacute; &acirc; &atilde; &auml; &aring; &aelig; &ccedil; &egrave; &eacute; &ecirc; &euml; &igrave; &iacute; &icirc; &iuml; &eth; &ntilde; &ograve; &oacute; &ocirc; &otilde; &ouml; &divide; &oslash; &ugrave; &uacute; &ucirc; &uuml; &yacute; &thorn; &yuml; &Amacr; &amacr; &Abreve; &abreve; &Aogon; &aogon; &Cacute; &cacute; &Ccirc; &ccirc; &Cdot; &cdot; &Ccaron; &ccaron; &Dcaron; &dcaron; &Dstrok; &dstrok; &Emacr; &emacr; &Ebreve; &ebreve; &Edot; &edot; &Eogon; &eogon; &Ecaron; &ecaron; &Gcirc; &gcirc; &Gbreve; &gbreve; &Gdot; &gdot; &Gcedil; &gcedil; &Hcirc; &hcirc; &Hstrok; &hstrok; &Itilde; &itilde; &Imacr; &imacr; &Ibreve; &ibreve; &Iogon; &iogon; &Idot; &imath; &inodot; &IJlig; &ijlig; &Jcirc; &jcirc; &Kcedil; &kcedil; &kgreen; &Lacute; &lacute; &Lcedil; &lcedil; &Lcaron; &lcaron; &Lmidot; &lmidot; &Lstrok; &lstrok; &Nacute; &nacute; &Ncedil; &ncedil; &Ncaron; &ncaron; &napos; &ENG; &eng; &Omacr; &omacr; &Obreve; &obreve; &Odblac; &odblac; &OElig; &oelig; &Racute; &racute; &Rcedil; &rcedil; &Rcaron; &rcaron; &Sacute; &sacute; &Scirc; &scirc; &Scedil; &scedil; &Scaron; &scaron; &Tcedil; &tcedil; &Tcaron; &tcaron; &Tstrok; &tstrok; &Utilde; &utilde; &Umacr; &umacr; &Ubreve; &ubreve; &Uring; &uring; &Udblac; &udblac; &Uogon; &uogon; &Wcirc; &wcirc; &Ycirc; &ycirc; &Yuml; &fnof; &circ; &tilde; &Alpha; &Beta; &Gamma; &Delta; &Epsilon; &Zeta; &Eta; &Theta; &Iota; &Kappa; &Lambda; &Mu; &Nu; &Xi; &Omicron; &Pi; &Rho; &Sigma; &Tau; &Upsilon; &Phi; &Chi; &Psi; &Omega; &alpha; &beta; &gamma; &delta; &epsilon; &zeta; &eta; &theta; &iota; &kappa; &lambda; &mu; &nu; &xi; &omicron; &pi; &rho; &sigmaf; &sigma; &tau; &upsilon; &phi; &chi; &psi; &omega; &thetasym; &upsih; &piv; &ensp; &emsp; &thinsp; &zwnj; &zwj; &lrm; &rlm; &ndash; &mdash; &lsquo; &rsquo; &sbquo; &ldquo; &rdquo; &bdquo; &dagger; &Dagger; &bull; &hellip; &permil; &prime; &Prime; &lsaquo; &rsaquo; &oline; &euro; &trade; &larr; &uarr; &rarr; &darr; &harr; &crarr; &forall; &part; &exist; &empty; &nabla; &isin; &notin; &ni; &prod; &sum; &minus; &lowast; &radic; &prop; &infin; &ang; &and; &or; &cap; &cup; &int; &there4; &sim; &cong; &asymp; &ne; &equiv; &le; &ge; &sub; &sup; &nsub; &sube; &supe; &oplus; &otimes; &perp; &sdot; &lceil; &rceil; &lfloor; &rfloor; &loz; &spades; &clubs; &hearts; &diams; &#9; &#10; &#32; &#33; &#34; &#35; &#36; &#37; &#38; &#39; &#40; &#41; &#42; &#43; &#44; &#45; &#46; &#47; &#48; &#49; &#50; &#51; &#52; &#53; &#54; &#55; &#56; &#57; &#58; &#59; &#60; &#61; &#62; &#63; &#64; &#65; &#66; &#67; &#68; &#69; &#70; &#71; &#72; &#73; &#74; &#75; &#76; &#77; &#78; &#79; &#80; &#81; &#82; &#83; &#84; &#85; &#86; &#87; &#88; &#89; &#90; &#91; &#92; &#93; &#94; &#95; &#96; &#97; &#98; &#99; &#100; &#101; &#102; &#103; &#104; &#105; &#106; &#107; &#108; &#109; &#110; &#111; &#112; &#113; &#114; &#115; &#116; &#117; &#118; &#119; &#120; &#121; &#122; &#123; &#124; &#125; &#126; &#128; &#130; &#131; &#132; &#133; &#134; &#135; &#136; &#137; &#138; &#139; &#140; &#142; &#145; &#146; &#147; &#148; &#149; &#150; &#151; &#152; &#153; &#154; &#155; &#156; &#158; &#159; &#160; &#161; &#162; &#163; &#164; &#165; &#166; &#167; &#168; &#169; &#170; &#171; &#172; &#173; &#174; &#175; &#176; &#177; &#178; &#179; &#180; &#181; &#182; &#183; &#184; &#185; &#186; &#187; &#188; &#189; &#190; &#191; &#192; &#193; &#194; &#195; &#196; &#197; &#198; &#199; &#200; &#201; &#202; &#203; &#204; &#205; &#206; &#207; &#208; &#209; &#210; &#211; &#212; &#213; &#214; &#215; &#216; &#217; &#218; &#219; &#220; &#221; &#222; &#223; &#224; &#225; &#226; &#227; &#228; &#229; &#230; &#231; &#232; &#233; &#234; &#235; &#236; &#237; &#238; &#239; &#240; &#241; &#242; &#243; &#244; &#245; &#246; &#247; &#248; &#249; &#250; &#251; &#252; &#253; &#254; &#255; &#256; &#257; &#258; &#259; &#260; &#261; &#262; &#263; &#264; &#265; &#266; &#267; &#268; &#269; &#270; &#271; &#272; &#273; &#274; &#275; &#276; &#277; &#278; &#279; &#280; &#281; &#282; &#283; &#284; &#285; &#286; &#287; &#288; &#289; &#290; &#291; &#292; &#293; &#294; &#295; &#296; &#297; &#298; &#299; &#300; &#301; &#302; &#303; &#304; &#305; &#306; &#307; &#308; &#309; &#310; &#311; &#312; &#313; &#314; &#315; &#316; &#317; &#318; &#319; &#320; &#321; &#322; &#323; &#324; &#325; &#326; &#327; &#328; &#329; &#330; &#331; &#332; &#333; &#334; &#335; &#336; &#337; &#338; &#339; &#340; &#341; &#342; &#343; &#344; &#345; &#346; &#347; &#348; &#349; &#350; &#351; &#352; &#353; &#354; &#355; &#356; &#357; &#358; &#359; &#360; &#361; &#362; &#363; &#364; &#365; &#366; &#367; &#368; &#369; &#370; &#371; &#372; &#373; &#374; &#375; &#376; &#402; &#710; &#732; &#913; &#914; &#915; &#916; &#917; &#918; &#919; &#920; &#921; &#922; &#923; &#924; &#925; &#926; &#927; &#928; &#929; &#931; &#932; &#933; &#934; &#935; &#936; &#937; &#945; &#946; &#947; &#948; &#949; &#950; &#951; &#952; &#953; &#954; &#955; &#956; &#957; &#958; &#959; &#960; &#961; &#962; &#963; &#964; &#965; &#966; &#967; &#968; &#969; &#977; &#978; &#982; &#8194; &#8195; &#8201; &#8204; &#8205; &#8206; &#8207; &#8211; &#8212; &#8216; &#8217; &#8218; &#8220; &#8221; &#8222; &#8224; &#8225; &#8226; &#8230; &#8240; &#8242; &#8243; &#8249; &#8250; &#8254; &#8364; &#8482; &#8592; &#8593; &#8594; &#8595; &#8596; &#8629; &#8704; &#8706; &#8707; &#8709; &#8711; &#8712; &#8713; &#8715; &#8719; &#8721; &#8722; &#8727; &#8730; &#8733; &#8734; &#8736; &#8743; &#8744; &#8745; &#8746; &#8747; &#8756; &#8764; &#8773; &#8776; &#8800; &#8801; &#8804; &#8805; &#8834; &#8835; &#8836; &#8838; &#8839; &#8853; &#8855; &#8869; &#8901; &#8968; &#8969; &#8970; &#8971; &#9674; &#9824; &#9827; &#9829; &#9830;';

    const cleanString = decodeHtml(testString);
    const count = (cleanString.match(/&/g) || []).length;

    expect(count).toBe(9);
  });
});

describe('decodeHTML::lazyRemoveHtmlTags', () => {
  it('should removeHtmlTags from the given string', () => {
    const testString = '<remove>hey</remove><h1 status="bad"><br /> content</h1>';
    const expectedString = 'hey content';

    const result = lazyRemoveHtmlTags(testString);

    expect(result).toBe(expectedString);
  });
});
